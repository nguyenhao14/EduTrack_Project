üéì D·ª∞ √ÅN L·ªöN: EDU-TRACK ‚Äì H·ªá th·ªëng qu·∫£n l√Ω h·ªçc t·∫≠p & h·ªçc sinh
üß© M√¥ h√¨nh ki·∫øn tr√∫c:
Frontend: Windows Forms (VB.NET)

Backend: ASP.NET Web API (tr·∫£ JSON)

CSDL: Oracle

Ph√¢n l·ªõp r√µ r√†ng: UI ‚ûù Service ‚ûù Transport ‚ûù API ‚ûù DB

üß† Ch·ª©c nƒÉng t·ªïng th·ªÉ:
üë§ 1. Qu·∫£n l√Ω ng∆∞·ªùi d√πng
ƒêƒÉng nh·∫≠p (Gmail/Username + m·∫≠t kh·∫©u m√£ h√≥a)

Ph√¢n quy·ªÅn: H·ªçc sinh, Gi√°o vi√™n, Qu·∫£n tr·ªã vi√™n

Ch·ªânh s·ª≠a h·ªì s∆°, ƒë·ªïi m·∫≠t kh·∫©u

üéí 2. Qu·∫£n l√Ω h·ªçc sinh
Danh s√°ch h·ªçc sinh theo l·ªõp

Th√™m/s·ª≠a/x√≥a h·ªçc sinh

T√¨m ki·∫øm h·ªçc sinh theo t√™n, m√£, l·ªõp

üìö 3. Qu·∫£n l√Ω kh√≥a h·ªçc & m√¥n h·ªçc
T·∫°o kh√≥a h·ªçc (To√°n 10, L√Ω 12‚Ä¶)

G√°n m√¥n h·ªçc v√†o kh√≥a h·ªçc

Giao m√¥n cho gi√°o vi√™n

üìù 4. Qu·∫£n l√Ω ƒëi·ªÉm & b√†i ki·ªÉm tra
Nh·∫≠p ƒëi·ªÉm theo m√¥n ‚Äì theo l·ªõp

Xem l·ªãch s·ª≠ ƒëi·ªÉm c·ªßa h·ªçc sinh

Th·ªëng k√™ h·ªçc l·ª±c

üóÇÔ∏è 5. H·ªçc li·ªáu & b√†i t·∫≠p
Gi√°o vi√™n upload t√†i li·ªáu (PDF, Word)

H·ªçc sinh t·∫£i v·ªÅ h·ªçc

Giao v√† n·ªôp b√†i t·∫≠p

üóìÔ∏è 6. L·ªãch h·ªçc / L·ªãch thi
T·∫°o l·ªãch h·ªçc tu·∫ßn cho t·ª´ng l·ªõp

L√™n l·ªãch thi v√† ph√¢n ph√≤ng

Th√¥ng b√°o t·ª± ƒë·ªông ƒë·∫øn h·ªçc sinh

üí¨ 7. Chat n·ªôi b·ªô gi·ªØa gi√°o vi√™n v√† h·ªçc sinh
T√≠ch h·ª£p chat c∆° b·∫£n (WinForms)

G·ª≠i tin nh·∫Øn vƒÉn b·∫£n, file ƒë√≠nh k√®m nh·ªè

H·ªçc sinh g·ª≠i c√¢u h·ªèi ‚Äì GV tr·∫£ l·ªùi

üìä 8. B√°o c√°o & th·ªëng k√™
H·ªçc l·ª±c theo l·ªõp

Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh h·ªçc t·∫≠p

Danh s√°ch h·ªçc sinh y·∫øu ‚Äì c·∫ßn h·ªó tr·ª£
-------------------------------------------------------
‚öôÔ∏è C√¥ng ngh·ªá g·ª£i √Ω tri·ªÉn khai
Th√†nh ph·∫ßn	C√¥ng ngh·ªá s·ª≠ d·ª•ng
UI	Windows Forms (VB.NET)
Giao ti·∫øp	HttpClient g·ªçi ƒë·∫øn ASP.NET Web API
API	ASP.NET Web API (.NET 6/7)
Database	Oracle 19c
ORM/API DB	Dapper ho·∫∑c ADO.NET
M·∫≠t kh·∫©u	SHA256 / Bcrypt hash
File upload/download	T√≠ch h·ª£p API nh·∫≠n/tr·∫£ t·ªáp PDF
--------------------------------------------------------
C·∫•u tr√∫c ph√¢n t·∫ßng g·ª£i √Ω
Windows Forms Project:
markdown
Sao ch√©p
Ch·ªânh s·ª≠a
- EduTrack.UI
   - Forms/
   - Controls/
   - Views/
- EduTrack.Service
   - UserService.vb
   - StudentService.vb
- EduTrack.Transport
   - DTO/
---------------------------------------------------------
ASP.NET Web API Project:
diff
Sao ch√©p
Ch·ªânh s·ª≠a
- Controllers/
- Models/
- Services/
- Repositories/
---------------------------------------------------------
 B·∫£o m·∫≠t:
JWT Token ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng (c√≥ th·ªÉ l∆∞u trong local file ho·∫∑c Registry)

Role-based Authorization: Admin/GV/HS ph√¢n quy·ªÅn chi ti·∫øt

Logging nh·∫≠t k√Ω thao t√°c ng∆∞·ªùi d√πng


-----------------------------------------------------------
DB:
‚úÖ T·ªîNG QUAN C·∫§U TR√öC
H·ªá th·ªëng g·ªìm c√°c nh√≥m b·∫£ng:

Nh√≥m ch·ª©c nƒÉng	B·∫£ng ch√≠nh
Ng∆∞·ªùi d√πng & ph√¢n quy·ªÅn	USERS, ROLES, USER_ROLES, USER_PROFILE
Qu·∫£n l√Ω l·ªõp h·ªçc	CLASSES, STUDENT_CLASS, TEACHER_CLASS
M√¥n h·ªçc & gi·∫£ng d·∫°y	SUBJECTS, TEACHER_SUBJECT, COURSE
ƒêi·ªÉm s·ªë & ƒë√°nh gi√°	EXAMS, SCORES
H·ªçc li·ªáu & b√†i t·∫≠p	FILES, ASSIGNMENTS, SUBMISSIONS
L·ªãch h·ªçc & thi	SCHEDULES, EXAM_SCHEDULES
Giao ti·∫øp n·ªôi b·ªô	MESSAGES, NOTIFICATIONS

üß© 1. USERS (T√†i kho·∫£n ng∆∞·ªùi d√πng)
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE USERS (
    USER_ID        VARCHAR2(20) PRIMARY KEY,
    EMAIL          VARCHAR2(100) UNIQUE NOT NULL,
    USERNAME       VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD_HASH  VARCHAR2(256) NOT NULL,
    CREATED_AT     DATE DEFAULT SYSDATE,
    LAST_LOGIN     DATE,
    IS_ACTIVE      CHAR(1) DEFAULT 'Y' -- 'Y', 'N'
);
üß© 2. ROLES (Quy·ªÅn h·ªá th·ªëng) & USER_ROLES (G√°n vai tr√≤)
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE ROLES (
    ROLE_ID    VARCHAR2(10) PRIMARY KEY,
    ROLE_NAME  VARCHAR2(50) UNIQUE
);

CREATE TABLE USER_ROLES (
    USER_ID   VARCHAR2(20),
    ROLE_ID   VARCHAR2(10),
    PRIMARY KEY (USER_ID, ROLE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID)
);
üí° Cho ph√©p 1 user c√≥ nhi·ªÅu vai tr√≤ (Admin + Teacher, ch·∫≥ng h·∫°n)

üß© 3. USER_PROFILE (Th√¥ng tin chi ti·∫øt)
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE USER_PROFILE (
    USER_ID     VARCHAR2(20) PRIMARY KEY,
    FULL_NAME   VARCHAR2(100),
    GENDER      CHAR(1), -- 'M', 'F'
    DOB         DATE,
    PHONE       VARCHAR2(15),
    ADDRESS     VARCHAR2(255),
    AVATAR_PATH VARCHAR2(255),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
üß© 4. CLASSES ‚Äì L·ªõp h·ªçc
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE CLASSES (
    CLASS_ID     VARCHAR2(10) PRIMARY KEY,
    CLASS_NAME   VARCHAR2(50),
    GRADE_LEVEL  NUMBER(2),
    CREATED_AT   DATE DEFAULT SYSDATE,
    IS_ACTIVE    CHAR(1) DEFAULT 'Y'
);
üß© 5. STUDENT_CLASS & TEACHER_CLASS
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE STUDENT_CLASS (
    USER_ID   VARCHAR2(20),
    CLASS_ID  VARCHAR2(10),
    ENROLLED_DATE DATE DEFAULT SYSDATE,
    PRIMARY KEY (USER_ID, CLASS_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID)
);

CREATE TABLE TEACHER_CLASS (
    USER_ID   VARCHAR2(20),
    CLASS_ID  VARCHAR2(10),
    ASSIGNED_DATE DATE DEFAULT SYSDATE,
    PRIMARY KEY (USER_ID, CLASS_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID)
);
üß© 6. SUBJECTS & TEACHER_SUBJECT & COURSE
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE SUBJECTS (
    SUBJECT_ID    VARCHAR2(10) PRIMARY KEY,
    SUBJECT_NAME  VARCHAR2(100)
);

CREATE TABLE TEACHER_SUBJECT (
    USER_ID     VARCHAR2(20),
    SUBJECT_ID  VARCHAR2(10),
    PRIMARY KEY (USER_ID, SUBJECT_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(SUBJECT_ID)
);

-- COURSE = M√¥n h·ªçc c·ª• th·ªÉ g·∫Øn v·ªõi l·ªõp
CREATE TABLE COURSES (
    COURSE_ID     VARCHAR2(20) PRIMARY KEY,
    SUBJECT_ID    VARCHAR2(10),
    CLASS_ID      VARCHAR2(10),
    TEACHER_ID    VARCHAR2(20),
    START_DATE    DATE,
    END_DATE      DATE,
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID),
    FOREIGN KEY (TEACHER_ID) REFERENCES USERS(USER_ID)
);
üß© 7. EXAMS & SCORES
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE EXAMS (
    EXAM_ID      VARCHAR2(20) PRIMARY KEY,
    COURSE_ID    VARCHAR2(20),
    EXAM_TYPE    VARCHAR2(20), -- Midterm, Final...
    EXAM_DATE    DATE,
    MAX_SCORE    NUMBER(5,2),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE SCORES (
    SCORE_ID     VARCHAR2(20) PRIMARY KEY,
    USER_ID      VARCHAR2(20),
    EXAM_ID      VARCHAR2(20),
    SCORE        NUMBER(5,2),
    SCORED_DATE  DATE DEFAULT SYSDATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (EXAM_ID) REFERENCES EXAMS(EXAM_ID)
);
üß© 8. FILES & ASSIGNMENTS & SUBMISSIONS
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE FILES (
    FILE_ID      VARCHAR2(20) PRIMARY KEY,
    TITLE        VARCHAR2(100),
    FILE_PATH    VARCHAR2(255),
    UPLOADED_BY  VARCHAR2(20),
    CLASS_ID     VARCHAR2(10),
    UPLOAD_DATE  DATE DEFAULT SYSDATE,
    FOREIGN KEY (UPLOADED_BY) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID)
);

CREATE TABLE ASSIGNMENTS (
    ASSIGNMENT_ID  VARCHAR2(20) PRIMARY KEY,
    COURSE_ID      VARCHAR2(20),
    TITLE          VARCHAR2(100),
    DESCRIPTION    CLOB,
    DUE_DATE       DATE,
    CREATED_AT     DATE DEFAULT SYSDATE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE SUBMISSIONS (
    SUBMISSION_ID    VARCHAR2(20) PRIMARY KEY,
    ASSIGNMENT_ID    VARCHAR2(20),
    USER_ID          VARCHAR2(20),
    SUBMIT_DATE      DATE DEFAULT SYSDATE,
    FILE_PATH        VARCHAR2(255),
    GRADE            NUMBER(5,2),
    FOREIGN KEY (ASSIGNMENT_ID) REFERENCES ASSIGNMENTS(ASSIGNMENT_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
üß© 9. SCHEDULES & EXAM_SCHEDULES
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE SCHEDULES (
    SCHEDULE_ID   VARCHAR2(20) PRIMARY KEY,
    COURSE_ID     VARCHAR2(20),
    DAY_OF_WEEK   VARCHAR2(10), -- MONDAY
    START_TIME    VARCHAR2(5),  -- HH:mm
    END_TIME      VARCHAR2(5),
    ROOM_NAME     VARCHAR2(50),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE EXAM_SCHEDULES (
    EXAM_ID     VARCHAR2(20),
    ROOM_NAME   VARCHAR2(50),
    PROCTOR_ID  VARCHAR2(20),
    FOREIGN KEY (EXAM_ID) REFERENCES EXAMS(EXAM_ID),
    FOREIGN KEY (PROCTOR_ID) REFERENCES USERS(USER_ID)
);
üß© 10. MESSAGES & NOTIFICATIONS
sql
Sao ch√©p
Ch·ªânh s·ª≠a
CREATE TABLE MESSAGES (
    MESSAGE_ID    VARCHAR2(20) PRIMARY KEY,
    SENDER_ID     VARCHAR2(20),
    RECEIVER_ID   VARCHAR2(20),
    MESSAGE_TEXT  CLOB,
    SENT_AT       DATE DEFAULT SYSDATE,
    FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE NOTIFICATIONS (
    NOTIF_ID      VARCHAR2(20) PRIMARY KEY,
    USER_ID       VARCHAR2(20),
    TITLE         VARCHAR2(100),
    MESSAGE       VARCHAR2(255),
    CREATED_AT    DATE DEFAULT SYSDATE,
    IS_READ       CHAR(1) DEFAULT 'N',
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
üéØ K·∫øt lu·∫≠n:
Ph√¢n quy·ªÅn t√°ch bi·ªát qua b·∫£ng ROLES, USER_ROLES (linh ho·∫°t m·ªü r·ªông).

D·ªØ li·ªáu c√≥ tr∆∞·ªùng ng√†y CREATED_AT, DUE_DATE, SCORED_DATE, ENROLLED_DATE, v.v.

C√≥ th·ªÉ tri·ªÉn khai ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng nh∆∞ qu·∫£n l√Ω ng∆∞·ªùi d√πng, kh√≥a h·ªçc, b√†i t·∫≠p, ƒëi·ªÉm s·ªë, nh·∫Øn tin.

