CREATE TABLE USERS (
    USER_ID        VARCHAR2(20) PRIMARY KEY,
    EMAIL          VARCHAR2(100) UNIQUE NOT NULL,
    USERNAME       VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD_HASH  VARCHAR2(256) NOT NULL,
    CREATED_AT     DATE DEFAULT SYSDATE,
    LAST_LOGIN     DATE,
    IS_ACTIVE      CHAR(1) DEFAULT 'Y' -- 'Y', 'N'
);

CREATE TABLE ROLES (
    ROLE_ID    VARCHAR2(10) PRIMARY KEY,
    ROLE_NAME  VARCHAR2(50) UNIQUE
);

CREATE TABLE USER_ROLES (
    USER_ID   VARCHAR2(20),
    ROLE_ID   VARCHAR2(10),
    PRIMARY KEY (USER_ID, ROLE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID)
);


CREATE TABLE USER_PROFILE (
    USER_ID     VARCHAR2(20) PRIMARY KEY,
    FULL_NAME   VARCHAR2(100),
    GENDER      CHAR(1), -- 'M', 'F'
    DOB         DATE,
    PHONE       VARCHAR2(15),
    ADDRESS     VARCHAR2(255),
    AVATAR_PATH VARCHAR2(255),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE CLASSES (
    CLASS_ID     VARCHAR2(10) PRIMARY KEY,
    CLASS_NAME   VARCHAR2(50),
    GRADE_LEVEL  NUMBER(2),
    CREATED_AT   DATE DEFAULT SYSDATE,
    IS_ACTIVE    CHAR(1) DEFAULT 'Y'
);

CREATE TABLE STUDENT_CLASS (
    USER_ID   VARCHAR2(20),
    CLASS_ID  VARCHAR2(10),
    ENROLLED_DATE DATE DEFAULT SYSDATE,
    PRIMARY KEY (USER_ID, CLASS_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID)
);

CREATE TABLE TEACHER_CLASS (
    USER_ID   VARCHAR2(20),
    CLASS_ID  VARCHAR2(10),
    ASSIGNED_DATE DATE DEFAULT SYSDATE,
    PRIMARY KEY (USER_ID, CLASS_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID)
);

CREATE TABLE SUBJECTS (
    SUBJECT_ID    VARCHAR2(10) PRIMARY KEY,
    SUBJECT_NAME  VARCHAR2(100)
);

CREATE TABLE TEACHER_SUBJECT (
    USER_ID     VARCHAR2(20),
    SUBJECT_ID  VARCHAR2(10),
    PRIMARY KEY (USER_ID, SUBJECT_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(SUBJECT_ID)
);

CREATE TABLE COURSES (
    COURSE_ID     VARCHAR2(20) PRIMARY KEY,
    SUBJECT_ID    VARCHAR2(10),
    CLASS_ID      VARCHAR2(10),
    TEACHER_ID    VARCHAR2(20),
    START_DATE    DATE,
    END_DATE      DATE,
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(SUBJECT_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID),
    FOREIGN KEY (TEACHER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE EXAMS (
    EXAM_ID      VARCHAR2(20) PRIMARY KEY,
    COURSE_ID    VARCHAR2(20),
    EXAM_TYPE    VARCHAR2(20), -- Midterm, Final...
    EXAM_DATE    DATE,
    MAX_SCORE    NUMBER(5,2),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE SCORES (
    SCORE_ID     VARCHAR2(20) PRIMARY KEY,
    USER_ID      VARCHAR2(20),
    EXAM_ID      VARCHAR2(20),
    SCORE        NUMBER(5,2),
    SCORED_DATE  DATE DEFAULT SYSDATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (EXAM_ID) REFERENCES EXAMS(EXAM_ID)
);

CREATE TABLE FILES (
    FILE_ID      VARCHAR2(20) PRIMARY KEY,
    TITLE        VARCHAR2(100),
    FILE_PATH    VARCHAR2(255),
    UPLOADED_BY  VARCHAR2(20),
    CLASS_ID     VARCHAR2(10),
    UPLOAD_DATE  DATE DEFAULT SYSDATE,
    FOREIGN KEY (UPLOADED_BY) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID)
);

CREATE TABLE ASSIGNMENTS (
    ASSIGNMENT_ID  VARCHAR2(20) PRIMARY KEY,
    COURSE_ID      VARCHAR2(20),
    TITLE          VARCHAR2(100),
    DESCRIPTION    CLOB,
    DUE_DATE       DATE,
    CREATED_AT     DATE DEFAULT SYSDATE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE SUBMISSIONS (
    SUBMISSION_ID    VARCHAR2(20) PRIMARY KEY,
    ASSIGNMENT_ID    VARCHAR2(20),
    USER_ID          VARCHAR2(20),
    SUBMIT_DATE      DATE DEFAULT SYSDATE,
    FILE_PATH        VARCHAR2(255),
    GRADE            NUMBER(5,2),
    FOREIGN KEY (ASSIGNMENT_ID) REFERENCES ASSIGNMENTS(ASSIGNMENT_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE SCHEDULES (
    SCHEDULE_ID   VARCHAR2(20) PRIMARY KEY,
    COURSE_ID     VARCHAR2(20),
    DAY_OF_WEEK   VARCHAR2(10), -- MONDAY
    START_TIME    VARCHAR2(5),  -- HH:mm
    END_TIME      VARCHAR2(5),
    ROOM_NAME     VARCHAR2(50),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE EXAM_SCHEDULES (
    EXAM_ID     VARCHAR2(20),
    ROOM_NAME   VARCHAR2(50),
    PROCTOR_ID  VARCHAR2(20),
    FOREIGN KEY (EXAM_ID) REFERENCES EXAMS(EXAM_ID),
    FOREIGN KEY (PROCTOR_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE MESSAGES (
    MESSAGE_ID    VARCHAR2(20) PRIMARY KEY,
    SENDER_ID     VARCHAR2(20),
    RECEIVER_ID   VARCHAR2(20),
    MESSAGE_TEXT  CLOB,
    SENT_AT       DATE DEFAULT SYSDATE,
    FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE NOTIFICATIONS (
    NOTIF_ID      VARCHAR2(20) PRIMARY KEY,
    USER_ID       VARCHAR2(20),
    TITLE         VARCHAR2(100),
    MESSAGE       VARCHAR2(255),
    CREATED_AT    DATE DEFAULT SYSDATE,
    IS_READ       CHAR(1) DEFAULT 'N',
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);